name: Build Custom Linux Distro

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y debootstrap mkisofs squashfs-tools xorriso mtools grub-pc-bin grub-efi-amd64-bin

    - name: Create Root Filesystem
      run: |
        mkdir -p custom_distro/chroot
        sudo debootstrap --arch=amd64 focal custom_distro/chroot http://archive.ubuntu.com/ubuntu/
        sudo mount --bind /dev custom_distro/chroot/dev
        sudo mount --bind /proc custom_distro/chroot/proc
        sudo mount --bind /sys custom_distro/chroot/sys

    - name: Configure the Chroot Environment
      run: |
        sudo cp /etc/resolv.conf custom_distro/chroot/etc/
        sudo chroot custom_distro/chroot /bin/bash -c "
          apt-get update &&
          apt-get install -y ubuntu-desktop gnome-shell gdm3 &&
          apt-get install -y python3 python3-tk &&
          echo 'python3 /hello_world.py' >> /etc/rc.local &&
          chmod +x /etc/rc.local
        "

    - name: Add Custom Python Script
      run: |
        echo 'import tkinter as tk' > custom_distro/chroot/hello_world.py
        echo 'root = tk.Tk()' >> custom_distro/chroot/hello_world.py
        echo 'root.geometry("600x400")' >> custom_distro/chroot/hello_world.py
        echo 'label = tk.Label(root, text="Hello, World!")' >> custom_distro/chroot/hello_world.py
        echo 'label.pack(pady=20)' >> custom_distro/chroot/hello_world.py
        echo 'root.mainloop()' >> custom_distro/chroot/hello_world.py

    - name: Configure GRUB for BIOS
      run: |
        sudo chroot custom_distro/chroot /bin/bash -c "
          apt-get update &&
          apt-get install -y grub-pc &&
          mkdir -p /boot/grub &&
          grub-install --root-directory=/ --boot-directory=/boot /dev/sda &&
          grub-mkconfig -o /boot/grub/grub.cfg
        "

    - name: Configure GRUB for UEFI
      run: |
        # Mount EFI partition
        sudo mkdir -p custom_distro/chroot/boot/efi
        # For demonstration, using a dummy mount point, adjust this based on actual setup
        # In a real scenario, you'd have an actual EFI partition mounted here
        sudo mount --bind /boot/efi custom_distro/chroot/boot/efi

        # Run GRUB installation
        sudo chroot custom_distro/chroot /bin/bash -c "
          apt-get update &&
          apt-get install -y grub-efi-amd64 &&
          grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu &&
          grub-mkconfig -o /boot/grub/grub.cfg
        "

    - name: Create ISO Image
      run: |
        # Create necessary directories
        mkdir -p custom_distro/iso/boot/grub
        
        # Copy GRUB configuration
        cp custom_distro/chroot/boot/grub/grub.cfg custom_distro/iso/boot/grub/
        
        # Exclude virtual filesystems and use rsync to copy files
        sudo rsync -a --exclude={/dev/**,/proc/**,/sys/**,/boot/efi/**} custom_distro/chroot/ custom_distro/iso/
        
        # Generate the ISO image with -joliet-long option
        sudo mkisofs -o /tmp/custom_linux.iso -b boot/grub/i386-pc/eltorito.img \
          -no-emul-boot -boot-load-size 4 -boot-info-table -J -joliet-long -R -V "Custom Linux" \
          custom_distro/iso


    - name: Upload ISO as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: custom-linux-iso
        path: /tmp/custom_linux.iso
